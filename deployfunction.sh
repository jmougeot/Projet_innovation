#!/bin/bash

# üöÄ Script de d√©ploiement automatis√© Firebase Functions
# Usage: ./deployfunction.sh [fonction] [--force]

set -e  # Arr√™te le script en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions disponibles
AVAILABLE_FUNCTIONS=(
    "setRestaurantAccess"
    "removeRestaurantAccess" 
    "getUserRestaurantAccess"
    "emergencyLockdown"
    "liftEmergencyLockdown"
    "debugUserClaims"
)

# Variables
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FUNCTIONS_DIR="$PROJECT_ROOT/functions"
TARGET_FUNCTION="$1"
FORCE_DEPLOY="$2"

echo -e "${BLUE}üöÄ Script de d√©ploiement Firebase Functions${NC}"
echo -e "${BLUE}===============================================${NC}"

# V√©rifier que Firebase CLI est install√©
if ! command -v firebase &> /dev/null; then
    echo -e "${RED}‚ùå Firebase CLI n'est pas install√©${NC}"
    echo -e "${YELLOW}Installation: npm install -g firebase-tools${NC}"
    exit 1
fi

# V√©rifier que nous sommes dans le bon projet
echo -e "${YELLOW}üîç V√©rification du projet Firebase...${NC}"
cd "$PROJECT_ROOT"

CURRENT_PROJECT=$(firebase use --config --token 2>/dev/null | grep "active" | cut -d'"' -f4 || echo "")
if [ "$CURRENT_PROJECT" != "app-restaurant-a6370" ]; then
    echo -e "${RED}‚ùå Projet Firebase incorrect: $CURRENT_PROJECT${NC}"
    echo -e "${YELLOW}Configuration du bon projet...${NC}"
    firebase use app-restaurant-a6370
fi

echo -e "${GREEN}‚úÖ Projet: $CURRENT_PROJECT${NC}"

# Aller dans le dossier functions
cd "$FUNCTIONS_DIR"

# V√©rifier que les d√©pendances sont install√©es
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}üì¶ Installation des d√©pendances...${NC}"
    npm install
fi

# Compiler TypeScript
echo -e "${YELLOW}üî® Compilation TypeScript...${NC}"
npm run build

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur de compilation TypeScript${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Compilation r√©ussie${NC}"

# Fonction d'aide
show_help() {
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  ./deployfunction.sh                    # D√©ploie toutes les fonctions"
    echo -e "  ./deployfunction.sh [fonction]         # D√©ploie une fonction sp√©cifique"
    echo -e "  ./deployfunction.sh all --force        # Force le d√©ploiement de tout"
    echo -e ""
    echo -e "${BLUE}Fonctions disponibles:${NC}"
    for func in "${AVAILABLE_FUNCTIONS[@]}"; do
        echo -e "  - $func"
    done
    echo -e ""
    echo -e "${BLUE}Exemples:${NC}"
    echo -e "  ./deployfunction.sh setRestaurantAccess"
    echo -e "  ./deployfunction.sh emergencyLockdown"
    echo -e "  ./deployfunction.sh all"
}

# V√©rifier les arguments
if [ "$TARGET_FUNCTION" == "--help" ] || [ "$TARGET_FUNCTION" == "-h" ]; then
    show_help
    exit 0
fi

# D√©ploiement
if [ -z "$TARGET_FUNCTION" ] || [ "$TARGET_FUNCTION" == "all" ]; then
    # D√©ployer toutes les fonctions
    echo -e "${YELLOW}üöÄ D√©ploiement de TOUTES les fonctions...${NC}"
    
    if [ "$FORCE_DEPLOY" == "--force" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Mode force activ√©${NC}"
        firebase deploy --only functions --force
    else
        firebase deploy --only functions
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Toutes les fonctions d√©ploy√©es avec succ√®s !${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors du d√©ploiement${NC}"
        exit 1
    fi
    
else
    # V√©rifier que la fonction existe
    if [[ ! " ${AVAILABLE_FUNCTIONS[@]} " =~ " ${TARGET_FUNCTION} " ]]; then
        echo -e "${RED}‚ùå Fonction inconnue: $TARGET_FUNCTION${NC}"
        echo -e "${YELLOW}Fonctions disponibles:${NC}"
        for func in "${AVAILABLE_FUNCTIONS[@]}"; do
            echo -e "  - $func"
        done
        exit 1
    fi
    
    # D√©ployer la fonction sp√©cifique
    echo -e "${YELLOW}üéØ D√©ploiement de la fonction: $TARGET_FUNCTION${NC}"
    
    if [ "$FORCE_DEPLOY" == "--force" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Mode force activ√©${NC}"
        firebase deploy --only functions:$TARGET_FUNCTION --force
    else
        firebase deploy --only functions:$TARGET_FUNCTION
    fi
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Fonction $TARGET_FUNCTION d√©ploy√©e avec succ√®s !${NC}"
        
        # Afficher l'URL de la fonction
        echo -e "${BLUE}üåê URL de la fonction:${NC}"
        echo -e "https://us-central1-app-restaurant-a6370.cloudfunctions.net/$TARGET_FUNCTION"
    else
        echo -e "${RED}‚ùå Erreur lors du d√©ploiement de $TARGET_FUNCTION${NC}"
        exit 1
    fi
fi

# Afficher les logs r√©cents
echo -e "${YELLOW}üìã Logs r√©cents:${NC}"
firebase functions:log --limit 5

echo -e "${GREEN}üéâ D√©ploiement termin√© !${NC}"

# Afficher les URLs de toutes les fonctions
echo -e "${BLUE}üåê URLs des fonctions:${NC}"
for func in "${AVAILABLE_FUNCTIONS[@]}"; do
    echo -e "  üì° $func:"
    echo -e "     https://us-central1-app-restaurant-a6370.cloudfunctions.net/$func"
done

echo -e "${BLUE}===============================================${NC}"
echo -e "${GREEN}‚ú® Firebase Functions pr√™tes √† l'emploi ! ‚ú®${NC}"
