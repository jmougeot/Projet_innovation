#!/bin/bash

# Script de d√©ploiement automatique pour l'application Expo sur Firebase Hosting
# Usage: ./deploy.sh [--clean] [--skip-build]

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ] || [ ! -f "firebase.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet (l√† o√π se trouvent package.json et firebase.json)"
    exit 1
fi

# Variables
CLEAN=false
SKIP_BUILD=false

# Parser les arguments
for arg in "$@"; do
    case $arg in
        --clean)
            CLEAN=true
            shift
            ;;
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./deploy.sh [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --clean      Nettoie les dossiers de build avant de construire"
            echo "  --skip-build Ignore l'√©tape de build et d√©ploie directement"
            echo "  --help, -h   Affiche cette aide"
            exit 0
            ;;
        *)
            print_warning "Option inconnue: $arg"
            ;;
    esac
done

print_info "üöÄ D√©but du d√©ploiement de l'application Expo"

# Nettoyage si demand√©
if [ "$CLEAN" = true ]; then
    print_info "üßπ Nettoyage des fichiers de build..."
    rm -rf dist
    rm -rf .expo
    rm -rf node_modules/.cache
    print_success "Nettoyage termin√©"
fi

# V√©rifier les d√©pendances
if [ ! -d "node_modules" ]; then
    print_info "üì¶ Installation des d√©pendances..."
    npm install
    print_success "D√©pendances install√©es"
fi

# Build de l'application
if [ "$SKIP_BUILD" = false ]; then
    print_info "üî® Construction de l'application web..."
    
    # V√©rifier si le dossier dist existe d√©j√†
    if [ -d "dist" ]; then
        print_warning "Le dossier dist existe d√©j√†, suppression..."
        rm -rf dist
    fi
    
    # Lancer le build
    npm run build:web
    
    # V√©rifier si le build a r√©ussi
    if [ ! -d "dist" ]; then
        print_error "Le build a √©chou√© - le dossier dist n'a pas √©t√© cr√©√©"
        exit 1
    fi
    
    print_success "Build termin√© avec succ√®s"
else
    print_warning "‚è≠Ô∏è  √âtape de build ignor√©e"
    
    # V√©rifier si le dossier dist existe
    if [ ! -d "dist" ]; then
        print_error "Le dossier dist n'existe pas. Vous devez faire un build avant de d√©ployer."
        exit 1
    fi
fi

# V√©rifier la connexion Firebase
print_info "üîê V√©rification de la connexion Firebase..."
if ! firebase projects:list > /dev/null 2>&1; then
    print_warning "Vous n'√™tes pas connect√© √† Firebase. Connexion en cours..."
    firebase login
fi

# Afficher le projet Firebase actuel
PROJECT_ID=$(firebase use | grep "active project" | cut -d' ' -f4 | tr -d '()')
if [ ! -z "$PROJECT_ID" ]; then
    print_info "üìã Projet Firebase actuel: $PROJECT_ID"
else
    print_warning "Aucun projet Firebase s√©lectionn√©"
fi

# D√©ploiement
print_info "D√©ploiement sur Firebase Hosting..."
firebase deploy --only hosting

# V√©rifier le succ√®s du d√©ploiement
if [ $? -eq 0 ]; then
    print_success "D√©ploiement termin√© avec succ√®s!"
    
    # Afficher l'URL de l'application
    if [ ! -z "$PROJECT_ID" ]; then
        echo ""
        print_info "üåê Votre application est accessible √†:"
        echo -e "${GREEN}   https://$PROJECT_ID.web.app${NC}"
        echo ""
        print_info "üìä Console Firebase:"
        echo -e "${BLUE}   https://console.firebase.google.com/project/$PROJECT_ID/overview${NC}"
    fi
else
    print_error "Le d√©ploiement a √©chou√©"
    exit 1
fi

print_success "‚ú® Processus de d√©ploiement termin√©!"
