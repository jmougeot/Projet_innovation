rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============== FONCTIONS UTILITAIRES ===============
    
    function isAuthenticated() {
      return request.auth != null;
    }

    // ⚡ Vérifier l'accès utilisateur via la collection userAccess (sécurité maximale)
    function hasRestaurantAccess(restaurantId) {
      return isAuthenticated() && 
             // Vérification directe dans la collection userAccess
             exists(/databases/$(database)/documents/restaurants/$(restaurantId)/userAccess/$(request.auth.uid));
    }
    
    // 🎯 Vérifier le rôle via la collection userAccess
    function hasRole(restaurantId, role) {
      return isAuthenticated() && 
             // Lecture du document userAccess pour obtenir le rôle
             get(/databases/$(database)/documents/restaurants/$(restaurantId)/userAccess/$(request.auth.uid)).data.role == role;
    }
    
    // 👑 Vérifier si l'utilisateur est manager via userAccess
    function isManager(restaurantId) {
      return hasRole(restaurantId, 'manager');
    }
    
    // 🔧 Vérifier si l'utilisateur est super-admin (Custom Claims conservés pour cette fonction globale)
    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.superAdmin == true;
    }
    
    
    // =============== COLLECTIONS PRINCIPALES ===============
    
    // 🏪 RESTAURANTS : Données des restaurants
    // ⚠️ SÉCURITÉ MAXIMALE : Aucune modification directe autorisée
    match /restaurants/{restaurantId} {
      allow read: if isAuthenticated() && hasRestaurantAccess(restaurantId);
      allow write: if false;
      allow create: if isAuthenticated;
      allow update: if false;
      allow delete: if false;
      
      // =============== SOUS-COLLECTIONS ===============
      
      // ❌ USER ACCESS : Gestion des accès utilisateurs
      // ⚠️ SÉCURITÉ CRITIQUE : Aucune modification directe autorisée
      match /userAccess/{userId} {
        allow read: if isAuthenticated() && 
                       (request.auth.uid == userId || 
                        isManager(restaurantId) || 
                        isSuperAdmin());
        allow write: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
      
      // 📋 MENUS : Utilisateurs avec accès au restaurant
      match /menus/{menuId} {
        allow read: if hasRestaurantAccess(restaurantId);
        allow write: if hasRestaurantAccess(restaurantId);

      }
      
      // 🎫 TICKETS : Gestion des tickets avec conditions sur le statut
      match /tickets/{ticketId} {
        allow read: if hasRestaurantAccess(restaurantId);
        
        // Création : Utilisateurs autorisés
        allow create: if hasRestaurantAccess(restaurantId);
        
        // Modification : INTERDITE si le ticket est inactif (active: false)
        allow update: if hasRestaurantAccess(restaurantId) && resource.data.active == true;
                                
        // Suppression : INTERDITE
        allow delete: if false
      }
      
      // 📊 STOCK : Utilisateurs avec accès au restaurant
      match /stock/{itemId} {
        allow read: if hasRestaurantAccess(restaurantId);
        allow write: if hasRestaurantAccess(restaurantId);
      }
      
      // 🧹 MISSIONS : Utilisateurs avec accès au restaurant
      match /missions/{missionId} {
        allow read: if hasRestaurantAccess(restaurantId);
        allow create: if hasRestaurantAccess(restaurantId) && isManager(restaurantId);
        allow update: if hasRestaurantAccess(restaurantId);
        allow delete: if hasRestaurantAccess(restaurantId);
      }
      
      // 💰 COMPTABILITÉ : Managers uniquement
      match /accounting/{docId} {
        allow read, write: if hasRestaurantAccess(restaurantId) && isManager(restaurantId);
      }
      
      // 🔧 CONFIGURATION : Managers uniquement
      match /settings/{settingId} {
        allow read: if hasRestaurantAccess(restaurantId);
        allow write: if hasRestaurantAccess(restaurantId) && isManager(restaurantId);
      }
      
      // ❌ PROTECTION GLOBALE : Toute autre sous-collection
      match /{path=**} {
        allow read, write: if hasRestaurantAccess(restaurantId);                       
      }
    }
    
    // =============== COLLECTIONS UTILISATEURS ===============
    
    // 👤 USERS : Données personnelles des utilisateurs
    match /users/{userId} {
      // Lecture : Propriétaire ou super-admin
      allow write, read, update: if isAuthenticated() && (request.auth.uid == userId || isSuperAdmin());
    }
    
    // =============== COLLECTIONS DE LOGS ET AUDIT ===============
    
    // 📋 AUDIT LOGS : Logs d'audit (lecture seule pour utilisateurs)
    match /audit-logs/{logId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Écriture uniquement via Functions
    }
    
    // 🚨 SECURITY EVENTS : Événements de sécurité
    match /security-events/{eventId} {
      allow read: if isSuperAdmin();
      allow write: if false; // Écriture uniquement via Functions
    }

  
    }
    
    // =============== COLLECTIONS PUBLIQUES ===============
    
    // 🏪 RESTAURANT DIRECTORY : Répertoire public des restaurants
    match /restaurant_directory/{restaurantId} {
      // Lecture publique pour découverte
      allow read: if true;
      allow write: if isAuthenticated() && isManager(restaurantId);
    }
    
    // =============== RÈGLES PAR DÉFAUT ===============
    
    // ❌ REFUS PAR DÉFAUT : Toute autre collection est interdite
    match /{document=**} {
      allow read, write: if false;
    }
  }


// =============== COMMENTAIRES DE SÉCURITÉ ===============

/*
🔐 SÉCURITÉ ULTRA-RENFORCÉE AVEC USERACCESS :

1. ✅ AUTHENTIFICATION REQUISE
   - Toutes les opérations nécessitent une authentification Firebase

2. 🎯 AUTORISATION VIA USERACCÈS (NOUVEAU)
   - Vérification directe dans restaurants/{id}/userAccess/{uid}
   - Plus de dépendance aux Custom Claims pour l'accès
   - Contrôle par rôle via userAccess.role
   - Vérification de l'expiration via userAccess.expiresAt

3. ✅ SÉPARATION DES DONNÉES
   - Isolation parfaite par restaurant
   - Accès utilisateur UNIQUEMENT via documents userAccess

4. 🚫 PROTECTION TRIPLE COUCHE
   - Collection 'restaurants' : AUCUNE modification directe
   - Collection 'userAccess' : AUCUNE modification directe
   - Sous-collections : Accès uniquement si userAccess existe

5. ✅ CONTRÔLE DES FONCTIONS CRITIQUES
   - UserAccess géré uniquement via Functions
   - Audit logs protégés en écriture
   - Logique métier centralisée côté serveur

6. ✅ SESSIONS ET LOGS
   - Sessions isolées par utilisateur
   - Logs d'audit pour traçabilité

🚨 POINTS CRITIQUES ULTRA-SÉCURISÉS :

- ❌ IMPOSSIBLE de modifier restaurants/{id} directement
- ❌ IMPOSSIBLE de modifier restaurants/{id}/userAccess/{uid} directement
- ✅ SEULE la présence dans userAccess autorise l'accès au restaurant
- ✅ Chaque opération vérifie l'existence du document userAccess
- ✅ Protection absolue : même sans Custom Claims, userAccess fait autorité

📊 NOUVELLE ARCHITECTURE DE SÉCURITÉ :

Client App (React Native/Web)
    ↓ (Lecture conditionnelle)
Firestore Rules (Vérification userAccess)
    ↓ (Lecture de restaurants/{id}/userAccess/{uid})
Document UserAccess (Source de vérité)
    ↓ (Si existe → accès autorisé)
Collections Restaurant + Sous-collections

🛡️ AVANTAGES DE CETTE ARCHITECTURE :

1. Sécurité au niveau de la base de données (pas de JWT)
2. Contrôle granulaire par restaurant
3. Révocation instantanée (suppression userAccess)
4. Audit complet via collections Firestore
5. Impossibilité de falsifier les permissions

⚡ CONSIDÉRATIONS PERFORMANCE :

- Chaque opération lit le document userAccess
- Utilisation recommandée du cache Firestore
- Index requis sur les collections userAccess
- Optimisation via règles exists() vs get()

🎯 STRUCTURE USERACCÈS REQUISE :

restaurants/{restaurantId}/userAccess/{userId} {
  role: 'manager' | 'waiter' | 'chef' | 'cleaner',
  expiresAt: timestamp | null,
  grantedAt: timestamp,
  grantedBy: string
}
