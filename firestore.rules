rules_version = '2';

// üîê R√®gles de S√©curit√© Firestore pour l'Application Restaurant
// Ces r√®gles compl√®tent les Firebase Functions pour un contr√¥le d'acc√®s complet

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============== FONCTIONS UTILITAIRES ===============
    
    // V√©rifier si l'utilisateur est authentifi√©
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // V√©rifier si l'utilisateur a acc√®s √† un restaurant sp√©cifique
    function hasRestaurantAccess(restaurantId) {
      return isAuthenticated() && 
             request.auth.token.restaurantAccess != null &&
             restaurantId in request.auth.token.restaurantAccess;
    }
    
    // V√©rifier le r√¥le de l'utilisateur pour un restaurant
    function hasRole(restaurantId, role) {
      return hasRestaurantAccess(restaurantId) &&
             request.auth.token.restaurantAccess[restaurantId].role == role;
    }
    
    // V√©rifier si l'utilisateur est manager d'un restaurant
    function isManager(restaurantId) {
      return hasRole(restaurantId, 'manager');
    }
    
    // V√©rifier si l'utilisateur est super-admin
    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.superAdmin == true;
    }
    
    // V√©rifier si l'acc√®s n'est pas expir√©
    function isAccessValid(restaurantId) {
      return hasRestaurantAccess(restaurantId) &&
             request.time.toMillis() < request.auth.token.restaurantAccess[restaurantId].expiresAt;
    }
    
    // =============== COLLECTIONS PRINCIPALES ===============
    
    // üè™ RESTAURANTS : Donn√©es des restaurants
    match /restaurants/{restaurantId} {
      // Lecture : Utilisateurs ayant acc√®s valide au restaurant
      allow read: if isAuthenticated() && 
                     (hasRestaurantAccess(restaurantId) || isSuperAdmin());
      
      // √âcriture : Managers du restaurant ou super-admins
      allow write: if isAuthenticated() && 
                      (isManager(restaurantId) || isSuperAdmin()) &&
                      isAccessValid(restaurantId);
      
      // Cr√©ation : Seulement via Firebase Functions (Bootstrap)
      allow create: if false; // Forc√© via Functions uniquement
      
      // Suppression : Super-admins uniquement
      allow delete: if isSuperAdmin();
      
      // =============== SOUS-COLLECTIONS ===============
      
      // üìã MENUS
      match /menus/{menuId} {
        allow read: if hasRestaurantAccess(restaurantId) && isAccessValid(restaurantId);
        allow write: if isManager(restaurantId) || hasRole(restaurantId, 'chef');
      }
      
      // üõí COMMANDES
      match /orders/{orderId} {
        allow read: if hasRestaurantAccess(restaurantId) && isAccessValid(restaurantId);
        allow create: if hasRole(restaurantId, 'waiter') || isManager(restaurantId);
        allow update: if hasRole(restaurantId, 'waiter') || 
                         hasRole(restaurantId, 'chef') || 
                         isManager(restaurantId);
        allow delete: if isManager(restaurantId);
      }
      
      // üìä STOCK
      match /stock/{itemId} {
        allow read: if hasRestaurantAccess(restaurantId) && isAccessValid(restaurantId);
        allow write: if hasRole(restaurantId, 'chef') || isManager(restaurantId);
      }
      
      // üßπ MISSIONS
      match /missions/{missionId} {
        allow read: if hasRestaurantAccess(restaurantId) && isAccessValid(restaurantId);
        allow create: if isManager(restaurantId);
        allow update: if hasRole(restaurantId, 'cleaner') || isManager(restaurantId);
        allow delete: if isManager(restaurantId);
      }
      
      // üí∞ COMPTABILIT√â
      match /accounting/{docId} {
        allow read, write: if isManager(restaurantId) && isAccessValid(restaurantId);
      }
      
      // üîß CONFIGURATION
      match /settings/{settingId} {
        allow read: if hasRestaurantAccess(restaurantId) && isAccessValid(restaurantId);
        allow write: if isManager(restaurantId) && isAccessValid(restaurantId);
      }
    }
    
    // =============== COLLECTIONS UTILISATEURS ===============
    
    // üë§ USERS : Donn√©es personnelles des utilisateurs
    match /users/{userId} {
      // Lecture : Propri√©taire ou super-admin
      allow read: if isAuthenticated() && 
                     (request.auth.uid == userId || isSuperAdmin());
      
      // √âcriture : Propri√©taire uniquement
      allow write: if isAuthenticated() && request.auth.uid == userId;
      
      // Les claims restaurantAccess sont g√©r√©s uniquement via Functions
      allow update: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       !('restaurantAccess' in request.resource.data.diff(resource.data).affectedKeys());
    }
    
    // =============== COLLECTIONS DE LOGS ET AUDIT ===============
    
    // üìã AUDIT LOGS : Logs d'audit (lecture seule pour utilisateurs)
    match /audit-logs/{logId} {
      allow read: if isSuperAdmin();
      allow write: if false; // √âcriture uniquement via Functions
    }
    
    // üö® SECURITY EVENTS : √âv√©nements de s√©curit√©
    match /security-events/{eventId} {
      allow read: if isSuperAdmin();
      allow write: if false; // √âcriture uniquement via Functions
    }
    
    // =============== COLLECTIONS SESSIONS ===============
    
    // üîê RESTAURANT SESSIONS : Sessions actives
    match /restaurant_sessions/{sessionId} {
      // Lecture : Propri√©taire de la session
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Cr√©ation : Utilisateur authentifi√© (sa propre session)
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Mise √† jour : Propri√©taire uniquement
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Suppression : Propri√©taire ou manager du restaurant
      allow delete: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid ||
                        isManager(resource.data.restaurantId));
    }
    
    // =============== COLLECTIONS PUBLIQUES ===============
    
    // üè™ RESTAURANT DIRECTORY : R√©pertoire public des restaurants
    match /restaurant_directory/{restaurantId} {
      // Lecture publique pour d√©couverte
      allow read: if true;
      
      // √âcriture : Managers uniquement
      allow write: if isAuthenticated() && isManager(restaurantId);
    }
    
    // =============== R√àGLES PAR D√âFAUT ===============
    
    // ‚ùå REFUS PAR D√âFAUT : Toute autre collection est interdite
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// =============== COMMENTAIRES DE S√âCURIT√â ===============

/*
üîê NIVEAUX DE S√âCURIT√â IMPL√âMENT√âS :

1. ‚úÖ AUTHENTIFICATION REQUISE
   - Toutes les op√©rations n√©cessitent une authentification Firebase

2. ‚úÖ AUTORISATION GRANULAIRE  
   - V√©rification des custom claims (restaurantAccess)
   - Contr√¥le par r√¥le (manager, waiter, chef, cleaner)
   - V√©rification de l'expiration des acc√®s

3. ‚úÖ S√âPARATION DES DONN√âES
   - Isolation par restaurant
   - Acc√®s utilisateur limit√© √† ses restaurants

4. ‚úÖ CONTR√îLE DES FONCTIONS CRITIQUES
   - Claims manag√©s uniquement via Functions
   - Audit logs prot√©g√©s en √©criture

5. ‚úÖ SESSIONS ET LOGS
   - Sessions isol√©es par utilisateur
   - Logs d'audit pour tra√ßabilit√©

üö® POINTS CRITIQUES :

- Les custom claims sont la source de v√©rit√© pour les permissions
- Les Firebase Functions sont le seul moyen de modifier les claims
- L'expiration des acc√®s est v√©rifi√©e c√¥t√© Firestore
- Les super-admins ont un acc√®s √©tendu (√† utiliser avec pr√©caution)

üìä PERFORMANCE :

- R√®gles optimis√©es pour minimiser les lectures
- Index requis sur restaurantAccess et r√¥les
- Cache des claims c√¥t√© client recommand√©
*/
