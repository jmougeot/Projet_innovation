import React, { useState, useEffect } from 'react';import {   View,   Text,  StyleSheet,  Platform,  ActivityIndicator,  TouchableOpacity,  Alert,  LayoutChangeEvent,  Pressable} from 'react-native';import { useFonts } from 'expo-font';import { Table, getTables, updateTables } from '@/app/firebase/firebaseTables';import { MaterialIcons } from '@expo/vector-icons';// Table size in pixelsconst TABLE_SIZE = 50;export default function ChangePlan() {  const [tables, setTables] = useState<Table[]>([]);  const [loading, setLoading] = useState(true);  const [saving, setSaving] = useState(false);  const [modified, setModified] = useState(false);  const [containerDimensions, setContainerDimensions] = useState({ width: 0, height: 0 });  const [selectedTableId, setSelectedTableId] = useState<number | null>(null);  const [longPressTimer, setLongPressTimer] = useState<ReturnType<typeof setTimeout> | null>(null);    const [fontsLoaded] = useFonts({    'AlexBrush': require('../../../assets/fonts/AlexBrush-Regular.ttf'),  });  // Handle layout changes to get container dimensions  const handleLayoutChange = (event: LayoutChangeEvent) => {    const { width, height } = event.nativeEvent.layout;    setContainerDimensions({ width, height });  };  // Load tables from Firebase  useEffect(() => {    const loadTables = async () => {      try {        setLoading(true);        const tablesData = await getTables();        setTables(tablesData);      } catch (error) {        console.error("Error loading tables:", error);        Alert.alert("Erreur", "Impossible de charger les tables");      } finally {        setLoading(false);      }    };        loadTables();  }, []);  // Handle table selection/movement  const handleTablePress = (tableId: number) => {    if (selectedTableId === tableId) {      // Deselect if clicking the same table      setSelectedTableId(null);    } else {      // Select the table      setSelectedTableId(tableId);    }  };  // Handle container press to move selected table  const handleContainerPress = (event: any) => {    if (!selectedTableId) return;    let x: number, y: number;    if (Platform.OS === 'web') {      // For web, get relative position to container      const rect = event.currentTarget.getBoundingClientRect();      x = event.clientX - rect.left;      y = event.clientY - rect.top;    } else {      // For mobile, use touch coordinates      x = event.nativeEvent.locationX;      y = event.nativeEvent.locationY;    }    // Adjust position to center the table on the clicked point    x = x - TABLE_SIZE / 2;    y = y - TABLE_SIZE / 2;    // Apply bounds checking    const padding = 10;    const headerSpace = 90;    const maxX = containerDimensions.width - TABLE_SIZE - padding;    const maxY = containerDimensions.height - TABLE_SIZE - padding;        x = Math.max(padding, Math.min(maxX, x));    y = Math.max(headerSpace, Math.min(maxY, y));    // Update table position    setTables(prevTables =>       prevTables.map(t =>         t.id === selectedTableId           ? { ...t, position: { x, y } }           : t      )    );        setModified(true);    setSelectedTableId(null); // Deselect after moving  };  // Handle long press to delete table  const handleLongPressStart = (tableId: number) => {    const timer = setTimeout(() => {      deleteTable(tableId);      setSelectedTableId(null);    }, 1000);    setLongPressTimer(timer);  };  const handleLongPressEnd = () => {    if (longPressTimer) {      clearTimeout(longPressTimer);      setLongPressTimer(null);    }  };  // Save table positions  const saveChanges = async () => {    try {      setSaving(true);      await updateTables(tables);      setModified(false);      Alert.alert("Succès", "Positions des tables enregistrées avec succès");    } catch (error) {      console.error("Error saving table positions:", error);      Alert.alert("Erreur", "Impossible d'enregistrer les positions");    } finally {      setSaving(false);    }  };  // Add a new table  const addNewTable = () => {    const newId = Date.now();        // Calculate a safe position for the new table    const padding = 15;    const headerSpace = 100;    let safeX = padding;    let safeY = headerSpace;        // Simple grid placement for new tables    const cols = Math.floor((containerDimensions.width - padding * 2) / (TABLE_SIZE + 15));    const tableIndex = tables.length;    const row = Math.floor(tableIndex / cols);    const col = tableIndex % cols;        safeX = padding + col * (TABLE_SIZE + 15);    safeY = headerSpace + row * (TABLE_SIZE + 15);        // Ensure we don't exceed bounds    if (safeX + TABLE_SIZE > containerDimensions.width - padding) {      safeX = padding;      safeY += TABLE_SIZE + 15;    }        const newTable: Table = {      id: newId,      numero: `${tables.length + 1}`,      places: 2,      status: 'libre',      position: { x: safeX, y: safeY }    };        setTables(prev => [...prev, newTable]);    setModified(true);  };  // Delete a table  const deleteTable = (tableId: number) => {    Alert.alert(      "Supprimer la table",      "Êtes-vous sûr de vouloir supprimer cette table ?",      [        { text: "Annuler", style: "cancel" },        {          text: "Supprimer",          style: "destructive",          onPress: () => {            setTables(prev => prev.filter(t => t.id !== tableId));            setModified(true);          }        }      ]    );  };  if (!fontsLoaded || loading) {    return (      <View style={[styles.container, styles.loadingContainer]}>        <ActivityIndicator size="large" color="#CAE1EF" />        <Text style={styles.loadingText}>Chargement des tables...</Text>      </View>    );  }  return (    <View style={styles.container}>      <View style={styles.headerSquare}>        <Text style={styles.headerSquareText}>Gestion des Tables</Text>      </View>            <View style={styles.contentContainer}>        <Text style={styles.instructionText}>          {selectedTableId             ? "Cliquez où vous voulez déplacer la table sélectionnée"             : "Sélectionnez une table puis cliquez où la déplacer • Appui long pour supprimer"          }        </Text>        <Pressable           style={styles.floorPlanContainer}          onLayout={handleLayoutChange}          onPress={handleContainerPress}        >          {tables.map((table) => (            <Pressable              key={`table-${table.id}`}              style={[                styles.tableItem,                {                  backgroundColor: getStatusColor(table.status),                  left: table.position.x,                  top: table.position.y,                  borderWidth: selectedTableId === table.id ? 3 : 0,                  borderColor: '#194A8D',                  transform: [{                    scale: selectedTableId === table.id ? 1.1 : 1                  }],                }              ]}              onPress={() => handleTablePress(table.id)}              onPressIn={() => handleLongPressStart(table.id)}              onPressOut={handleLongPressEnd}              onLongPress={() => {}} // Prevent default long press            >              <Text style={styles.tableNumber}>{table.numero}</Text>              <Text style={styles.placesText}>{table.places} places</Text>              {selectedTableId === table.id && (                <View style={styles.selectionIndicator}>                  <MaterialIcons name="touch-app" size={16} color="#194A8D" />                </View>              )}            </Pressable>          ))}        </Pressable>                <View style={styles.legende}>          <View style={styles.legendeItem}>            <View style={[styles.legendeCarre, { backgroundColor: '#4CAF50' }]} />            <Text style={styles.legendeText}>Libre</Text>          </View>          <View style={styles.legendeItem}>            <View style={[styles.legendeCarre, { backgroundColor: '#CAE1EF' }]} />            <Text style={styles.legendeText}>Réservée</Text>          </View>          <View style={styles.legendeItem}>            <View style={[styles.legendeCarre, { backgroundColor: '#EFBC51' }]} />            <Text style={styles.legendeText}>Occupée</Text>          </View>        </View>                {modified && (          <TouchableOpacity             style={styles.saveButton}            onPress={saveChanges}            disabled={saving}          >            {saving ? (              <ActivityIndicator size="small" color="#194A8D" />            ) : (              <>                <MaterialIcons name="save" size={24} color="#194A8D" />                <Text style={styles.saveButtonText}>Enregistrer les modifications</Text>              </>            )}          </TouchableOpacity>        )}      </View>      <TouchableOpacity         style={styles.addButton}        onPress={addNewTable}      >        <MaterialIcons name="add" size={30} color="#fff" />      </TouchableOpacity>    </View>  );}const getStatusColor = (status: Table['status']) => {  switch (status) {    case 'libre': return '#4CAF50';    case 'occupee': return '#EFBC51';    case 'reservee': return '#CAE1EF';  }};const styles = StyleSheet.create({  container: {    flex: 1,    padding: 10,    backgroundColor: '#194A8D',  },  headerSquare: {    alignSelf: 'center',    backgroundColor: '#CAE1EF',    width: 180,    height: 32,    marginBottom: 10,    borderRadius: 80,    justifyContent: 'center',    alignItems: 'center',    ...Platform.select({      ios: {        marginTop: 45,      },      android: {        elevation: 5,      },    }),  },  headerSquareText: {    color: '#083F8C',    fontWeight: 'bold',    fontSize: 16,  },  contentContainer: {    flex: 1,    backgroundColor: '#F3EFEF',    borderRadius: 20,    overflow: 'hidden',    padding: 8,  },  floorPlanContainer: {    flex: 1,    position: 'relative',    width: '100%',    height: '100%',  },  tableItem: {    position: 'absolute',    width: TABLE_SIZE,    height: TABLE_SIZE,    borderRadius: 10,    justifyContent: 'center',    alignItems: 'center',    elevation: 3,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.25,    shadowRadius: 3.84,    zIndex: 1,  },  tableNumber: {    color: '#194A8D',    fontSize: 16,    fontWeight: 'bold',  },  placesText: {    color: '#194A8D',    fontSize: 12,    marginTop: 3,  },  selectionIndicator: {    position: 'absolute',    top: -8,    right: -8,    backgroundColor: '#CAE1EF',    borderRadius: 10,    padding: 2,  },  instructionText: {    textAlign: 'center',    color: '#194A8D',    marginVertical: 8,    fontStyle: 'italic',    fontSize: 14,    minHeight: 20,  },  saveButton: {    flexDirection: 'row',    backgroundColor: '#CAE1EF',    paddingVertical: 10,    paddingHorizontal: 16,    borderRadius: 20,    justifyContent: 'center',    alignItems: 'center',    marginVertical: 8,    elevation: 3,    shadowColor: '#000',    shadowOffset: { width: 0, height: 1 },    shadowOpacity: 0.2,    shadowRadius: 2,  },  saveButtonText: {    color: '#194A8D',    fontWeight: 'bold',    fontSize: 14,    marginLeft: 6,  },  loadingContainer: {    justifyContent: 'center',    alignItems: 'center',  },  loadingText: {    color: '#CAE1EF',    fontSize: 16,    marginTop: 10,  },  legende: {    flexDirection: 'row',    justifyContent: 'space-around',    paddingVertical: 8,    borderTopWidth: 1,    borderTopColor: '#e0e0e0',    backgroundColor: '#F3EFEF',  },  legendeItem: {    flexDirection: 'row',    alignItems: 'center',  },  legendeCarre: {    width: 12,    height: 12,    marginRight: 6,    borderRadius: 3,  },  legendeText: {    color: '#083F8C',    fontSize: 12,  },  addButton: {    position: 'absolute',    right: 20,    bottom: 20,    backgroundColor: '#194A8D',    width: 50,    height: 50,    borderRadius: 25,    justifyContent: 'center',    alignItems: 'center',    elevation: 5,    shadowColor: '#000',    shadowOffset: { width: 0, height: 2 },    shadowOpacity: 0.3,    shadowRadius: 3,    zIndex: 10,  },});