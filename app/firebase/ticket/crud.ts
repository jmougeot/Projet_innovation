import {
  addDoc,
  doc,
  getDoc,
  serverTimestamp,
} from "firebase/firestore";
import { TicketData, PlatQuantite, UpdateTicketData, TicketChainData } from './types';
import { getTicketsCollectionRef } from './config';
import { calculateTicketHash, getLastTerminatedTicketHash } from './hash'

import { 
  createMainChainTicket, 
  updateTicketWithFork, 
  getActiveTicket,
  getTicketChain 
} from './blockchain';

// ====== FONCTIONS PRINCIPALES CRUD BLOCKCHAIN ======

/**
 * üéØ CR√âATION DE TICKET - Nouveau bloc dans la cha√Æne principale (BLOCKCHAIN)
 */
export const createTicket = async (ticketData: Omit<TicketData, 'id'>, restaurantId: string): Promise<string> => {
  try {
    console.log('üéØ [createTicket] Cr√©ation d\'un nouveau ticket via blockchain');
    
    // Utiliser la fonction blockchain pour cr√©er un bloc principal
    return await createMainChainTicket(ticketData, restaurantId);
    
  } catch (error) {
    console.error("‚ùå [createTicket] Erreur lors de la cr√©ation du ticket:", error);
    throw error;
  }
};

/**
 * üèÅ TERMINER TICKET - Cr√©e un fork pour marquer le ticket comme termin√© (BLOCKCHAIN)
 */
export const terminerTicket = async (
  ticketId: string, 
  restaurantId: string, 
  satisfaction?: number, 
  notes?: string
): Promise<void> => {
  try {
    console.log(`üèÅ [terminerTicket] Finalisation ticket via fork: ${ticketId}`);
    
    // R√©cup√©rer le ticket actuellement actif (peut √™tre un fork)
    const activeTicket = await getActiveTicket(ticketId, restaurantId);
    
    const dateCreation = activeTicket.dateCreation instanceof Date 
      ? activeTicket.dateCreation.getTime() 
      : activeTicket.dateCreation?.toMillis ? activeTicket.dateCreation.toMillis() 
      : Date.now();
    
    // R√©cup√©rer les informations de la cha√Æne de hachage
    const lastTicketHash = await getLastTerminatedTicketHash(restaurantId);
    const chainIndex = lastTicketHash ? lastTicketHash.index + 1 : 1;
    const previousHash = lastTicketHash ? lastTicketHash.hash : '';
    
    // Pr√©parer les donn√©es de mise √† jour pour le fork de finalisation
    const updateDataForTermination: UpdateTicketData = {
      active: false,
      status: 'encaissee',
      dureeTotal: Date.now() - dateCreation,
      chainIndex: chainIndex,
      previousHash: previousHash,
      // Only include satisfaction and notes if defined
      ...(satisfaction !== undefined && { satisfaction }),
      ...(notes !== undefined && { notes })
    };
    
    // Cr√©er le ticket avec les nouvelles donn√©es pour calculer le hash
    const ticketForHash = { ...activeTicket, ...updateDataForTermination };
    const ticketHash = calculateTicketHash(ticketForHash);
    
    // Ajouter le hash aux donn√©es de mise √† jour
    updateDataForTermination.hashe = ticketHash;
    
    // Cr√©er un fork de finalisation au lieu d'un updateDoc
    const finalForkId = await updateTicketWithFork(
      activeTicket.id,
      restaurantId,
      updateDataForTermination,
      activeTicket.employeeId,
      'correction' // Fork de finalisation
    );
    
    console.log('‚úÖ [terminerTicket] Ticket termin√© via fork:', { 
      originalTicketId: ticketId,
      finalForkId, 
      hash: ticketHash, 
      chainIndex, 
      previousHash: previousHash || 'GENESIS' 
    });
    
  } catch (error) {
    console.error('‚ùå [terminerTicket] Erreur lors de la finalisation:', error);
    throw error;
  }
};

/**
 * üîÑ MISE √Ä JOUR DE TICKET - Syst√®me blockchain avec FORK (JAMAIS de updateDoc)
 */
export const updateTicket = async (
  documentId: string, 
  restaurantId: string, 
  updateData: UpdateTicketData,
  employeeId?: string,
  forkReason: 'modification' | 'correction' | 'annulation' = 'modification'
): Promise<string> => { // Retourne l'ID du fork cr√©√©
  try {
    console.log("üîÑ [updateTicket] Mise √† jour via fork blockchain:", documentId);
    
    // Trouver le ticket actuellement actif (peut √™tre un fork existant)
    const activeTicket = await getActiveTicket(documentId, restaurantId);
    
    // Cr√©er un fork au lieu d'utiliser updateDoc
    const forkId = await updateTicketWithFork(
      activeTicket.id, // ID du ticket actif √† forker
      restaurantId,
      updateData,
      employeeId,
      forkReason
    );
    
    console.log("‚úÖ [updateTicket] Fork cr√©√© avec succ√®s:", {
      originalTicketId: documentId,
      activeTicketId: activeTicket.id,
      newForkId: forkId
    });
    
    return forkId;
    
  } catch (error) {
    console.error("‚ùå [updateTicket] Erreur lors de la mise √† jour:", error);
    throw error;
  }
};

/**
 * üóëÔ∏è SUPPRIMER UN TICKET - Cr√©e un fork avec status "deleted" (BLOCKCHAIN)
 */
export const deleteTicket = async (
  ticketId: string, 
  restaurantId: string, 
  employeeId?: string
): Promise<string> => {
  try {
    console.log("üóëÔ∏è [deleteTicket] Suppression du ticket via fork:", ticketId);
    
    // Cr√©er un fork pour marquer le ticket comme supprim√©
    const deletedForkId = await updateTicketWithFork(
      ticketId,
      restaurantId,
      {
        active: false,
        status: 'encaissee', // Statut final
        notes: 'Ticket supprim√©' // Indiquer la suppression
      },
      employeeId,
      'annulation' // Raison du fork
    );
    
    console.log("‚úÖ [deleteTicket] Ticket marqu√© comme supprim√© via fork:", {
      originalTicketId: ticketId,
      deletedForkId
    });
    
    return deletedForkId;
    
  } catch (error) {
    console.error("‚ùå [deleteTicket] Erreur lors de la suppression du ticket:", error);
    throw error;
  }
};

/**
 * üìã OBTENIR LE TICKET ACTIF - R√©cup√®re la version active (peut √™tre un fork)
 */
export const getTicketActif = async (
  originalTicketId: string,
  restaurantId: string
): Promise<TicketData> => {
  try {
    console.log("üìã [getTicketActif] R√©cup√©ration du ticket actif:", originalTicketId);
    
    return await getActiveTicket(originalTicketId, restaurantId);
    
  } catch (error) {
    console.error("‚ùå [getTicketActif] Erreur:", error);
    throw error;
  }
};

/**
 * ÔøΩ OBTENIR LA CHA√éNE COMPL√àTE D'UN TICKET
 */
export const getTicketHistorique = async (
  originalTicketId: string,
  restaurantId: string
): Promise<TicketChainData> => {
  try {
    console.log("üîó [getTicketHistorique] R√©cup√©ration de l'historique:", originalTicketId);
    
    return await getTicketChain(originalTicketId, restaurantId);
    
  } catch (error) {
    console.error("‚ùå [getTicketHistorique] Erreur:", error);
    throw error;
  }
};

// ====== EXPORTS PRINCIPAUX ======
export default {
  // Fonctions principales BLOCKCHAIN (plus d'updateDoc)
  createTicket,           // Cr√©e un nouveau bloc principal
  updateTicket,           // Cr√©e un fork au lieu d'update
  terminerTicket,         // Cr√©e un fork de finalisation
  deleteTicket,           // Cr√©e un fork de suppression
  
  // Fonctions de consultation
  getTicketActif,         // R√©cup√®re le ticket actuellement actif
  getTicketHistorique,    // R√©cup√®re toute la cha√Æne d'un ticket
};