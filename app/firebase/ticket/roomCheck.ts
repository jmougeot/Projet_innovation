import { getTicketByTableId } from './queries';
import { 
  startTicketsRealtimeSync, 
  getTicketListenersStatus 
} from './realtime';
import {
  getTicketsByTableCache,
  getTicketsByTableCacheTimestamp,
  getTableCacheDuration
} from './cache';

// Variable pour s'assurer qu'on d√©marre la sync une seule fois par restaurant
let syncStartedForRestaurants = new Set<string>();

/**
 * üöÄ Auto-d√©marrage de la synchronisation temps r√©el des tickets pour roomCheck
 */
const ensureTicketsRealtimeSyncStarted = async (restaurantId: string) => {
  const status = getTicketListenersStatus();
  
  // Si d√©j√† d√©marr√© pour ce restaurant, ne rien faire
  if (syncStartedForRestaurants.has(restaurantId) && status.isActive) {
    return;
  }
  
  try {
    console.log(`üöÄ Auto-d√©marrage de la synchronisation tickets pour roomCheck ${restaurantId}`);
    await startTicketsRealtimeSync(restaurantId);
    syncStartedForRestaurants.add(restaurantId);
    console.log(`‚úÖ Synchronisation tickets auto-d√©marr√©e pour roomCheck ${restaurantId}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Impossible de d√©marrer la sync tickets pour roomCheck ${restaurantId}:`, error);
    // Continue sans sync (fallback sur requ√™tes manuelles)
  }
};

/**
 * üöÄ V√©rification rapide d'un ticket pour une table via le cache temps r√©el
 */
const getActiveTicketFromCache = (tableId: number): { ticketId: string; isActive: boolean } | null => {
  const ticketsByTableCache = getTicketsByTableCache();
  const ticketsByTableCacheTimestamp = getTicketsByTableCacheTimestamp();
  const TABLE_CACHE_DURATION = getTableCacheDuration();
  
  const cachedTicket = ticketsByTableCache.get(tableId);
  const cacheTime = ticketsByTableCacheTimestamp.get(tableId) || 0;
  const now = Date.now();
  
  // V√©rifier si le cache est valide
  if (cachedTicket && (now - cacheTime) < TABLE_CACHE_DURATION) {
    return {
      ticketId: cachedTicket.id,
      isActive: cachedTicket.status !== 'encaissee'
    };
  }
  
  return null;
};

export interface ActiveTicketCheckResult {
  hasActiveTickets: boolean;
  activeTicketsCount: number;
  activeTablesWithTickets: { tableId: number; tableNumero: string; ticketId: string }[];
  message: string;
}

/**
 * V√©rifie s'il y a des tickets actifs dans une salle donn√©e - Version optimis√©e avec cache temps r√©el
 * @param roomId ID de la salle
 * @param restaurantId ID du restaurant
 * @returns Object avec le statut et les d√©tails des tickets actifs
 */
export const checkActiveTicketsInRoom = async (
  roomId: string, 
  restaurantId: string
): Promise<ActiveTicketCheckResult> => {
  try {
    console.log(`üîç V√©rification des tickets actifs dans la salle ${roomId} (avec cache temps r√©el)`);
    
    // üöÄ Auto-d√©marrer la synchronisation temps r√©el si pas encore active
    await ensureTicketsRealtimeSyncStarted(restaurantId);
    
    // Import dynamique pour √©viter les d√©pendances circulaires
    const { getAllTables } = await import('@/app/firebase/room&table/table');
    
    // 1. R√©cup√©rer toutes les tables de la salle
    const tables = await getAllTables(roomId, true, restaurantId);
    console.log(`üìä ${tables.length} tables trouv√©es dans la salle ${roomId}`);
    
    if (tables.length === 0) {
      return {
        hasActiveTickets: false,
        activeTicketsCount: 0,
        activeTablesWithTickets: [],
        message: `Aucune table dans la salle ${roomId}, suppression possible.`
      };
    }
    
    // 2. V√©rifier chaque table pour des tickets actifs - VERSION OPTIMIS√âE
    const activeTablesWithTickets: { tableId: number; tableNumero: string; ticketId: string }[] = [];
    let cacheHits = 0;
    let cacheMisses = 0;
    
    for (const table of tables) {
      try {
        // üöÄ Essayer d'abord le cache temps r√©el
        const cachedTicket = getActiveTicketFromCache(table.id);
        
        if (cachedTicket) {
          cacheHits++;
          if (cachedTicket.isActive) {
            activeTablesWithTickets.push({
              tableId: table.id,
              tableNumero: table.numero,
              ticketId: cachedTicket.ticketId
            });
            console.log(`üé´ Ticket actif trouv√© (CACHE): Table ${table.numero} (ID: ${table.id}) -> Ticket ${cachedTicket.ticketId}`);
          }
        } else {
          // üì° Fallback sur requ√™te Firebase si pas dans le cache
          cacheMisses++;
          console.log(`üíæ Cache miss pour table ${table.id}, requ√™te Firebase...`);
          
          const activeTicket = await getTicketByTableId(table.id, restaurantId, true);
          if (activeTicket && activeTicket.status !== 'encaissee') {
            activeTablesWithTickets.push({
              tableId: table.id,
              tableNumero: table.numero,
              ticketId: activeTicket.id
            });
            console.log(`üé´ Ticket actif trouv√© (FIREBASE): Table ${table.numero} (ID: ${table.id}) -> Ticket ${activeTicket.id}`);
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erreur lors de la v√©rification de la table ${table.id}:`, error);
        // Continue avec les autres tables
      }
    }
    
    const hasActiveTickets = activeTablesWithTickets.length > 0;
    const activeTicketsCount = activeTablesWithTickets.length;
    
    // üìä Statistiques de performance du cache
    console.log(`üìà Performance roomCheck: ${cacheHits} cache hits, ${cacheMisses} cache misses (${Math.round((cacheHits / (cacheHits + cacheMisses)) * 100)}% hit rate)`);
    
    let message: string;
    if (hasActiveTickets) {
      const tablesList = activeTablesWithTickets
        .map(item => `Table ${item.tableNumero} (Ticket: ${item.ticketId})`)
        .join(', ');
      message = `‚ùå Impossible de supprimer la salle "${roomId}". ${activeTicketsCount} table(s) avec tickets actifs: ${tablesList}`;
    } else {
      message = `‚úÖ Aucun ticket actif dans la salle "${roomId}". Suppression possible.`;
    }
    
    console.log(message);
    
    return {
      hasActiveTickets,
      activeTicketsCount,
      activeTablesWithTickets,
      message
    };
  } catch (error) {
    console.error(`‚ùå Erreur lors de la v√©rification des tickets actifs dans la salle ${roomId}:`, error);
    throw error;
  }
};

/**
 * üöÄ V√©rifie plusieurs salles en parall√®le pour des tickets actifs - Version ultra-optimis√©e
 * @param roomIds Liste des IDs de salles √† v√©rifier
 * @param restaurantId ID du restaurant
 * @returns Map des r√©sultats par salle
 */
export const checkActiveTicketsInMultipleRooms = async (
  roomIds: string[],
  restaurantId: string
): Promise<Map<string, ActiveTicketCheckResult>> => {
  try {
    console.log(`üîç V√©rification en parall√®le de ${roomIds.length} salles pour tickets actifs`);
    
    // üöÄ Auto-d√©marrer la synchronisation temps r√©el si pas encore active
    await ensureTicketsRealtimeSyncStarted(restaurantId);
    
    // V√©rifier toutes les salles en parall√®le
    const promises = roomIds.map(roomId => 
      checkActiveTicketsInRoom(roomId, restaurantId)
        .then(result => ({ roomId, result }))
        .catch(error => ({ 
          roomId, 
          result: {
            hasActiveTickets: false,
            activeTicketsCount: 0,
            activeTablesWithTickets: [],
            message: `Erreur lors de la v√©rification: ${error.message}`
          } as ActiveTicketCheckResult
        }))
    );
    
    const results = await Promise.all(promises);
    
    // Convertir en Map pour faciliter l'acc√®s
    const resultMap = new Map<string, ActiveTicketCheckResult>();
    results.forEach(({ roomId, result }) => {
      resultMap.set(roomId, result);
    });
    
    const totalActiveTickets = Array.from(resultMap.values())
      .reduce((sum, result) => sum + result.activeTicketsCount, 0);
    
    console.log(`‚úÖ V√©rification parall√®le termin√©e: ${totalActiveTickets} tickets actifs au total`);
    
    return resultMap;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification parall√®le des salles:', error);
    throw error;
  }
};
