// ====== EXPORTS CENTRALIS√âS BLOCKCHAIN ======

// Types et interfaces
export * from './types';

// Configuration
export * from './config';

// Cache intelligent
export * from './cache';

// Fonctions de hachage
export * from './hash';

// üîó Blockchain et Fork System (PRINCIPAL)
export * from './blockchain';

// Op√©rations CRUD (avec blockchain - plus d'updateDoc)
export * from './crud';

// Requ√™tes et recherches (mise √† jour pour blockchain)
export * from './queries';

// Utilitaires m√©tier
export * from './utils';

// V√©rifications de salle
export * from './roomCheck';

// Synchronisation temps r√©el
export * from './realtime';

// Gestion des modifications et tracking
export * from './modifications';

// üîó Export par d√©faut BLOCKCHAIN (fonctions principales seulement)
import { 
  createTicket, 
  updateTicket, 
  terminerTicket, 
  deleteTicket,
  getTicketActif,
  getTicketHistorique
} from './crud';
import { 
  createTicketFork,
  getTicketChain,
  getBlockchainStats,
  updateTicketWithFork,
  createMainChainTicket
} from './blockchain';
import { getTicketsActifs, getTicketByTableId } from './queries';
import { ticketEncaisse, updateStatusPlat } from './utils';

export default {
  // üîó FONCTIONS BLOCKCHAIN PRINCIPALES
  createTicket,          // Cr√©e un nouveau bloc principal
  updateTicket,          // Cr√©e un fork au lieu d'update
  terminerTicket,        // Fork de finalisation
  deleteTicket,          // Fork de suppression
  getTicketActif,        // R√©cup√®re le ticket actif (peut √™tre un fork)
  getTicketHistorique,   // R√©cup√®re toute la cha√Æne
  
  // üîÄ FONCTIONS BLOCKCHAIN AVANC√âES
  createTicketFork,      // Cr√©e un fork explicitement
  updateTicketWithFork,  // Version d√©taill√©e du fork
  getTicketChain,        // Analyse compl√®te de la cha√Æne
  getBlockchainStats,    // Statistiques de la blockchain
  createMainChainTicket, // Cr√©e un bloc principal
  
  // üìä REQU√äTES (compatibles blockchain)
  getTicketsActifs,      // R√©cup√®re tous les tickets actifs (inclut forks)
  getTicketByTableId,    // R√©cup√®re le ticket actif d'une table
  
  // üõ†Ô∏è UTILITAIRES M√âTIER
  ticketEncaisse,        // Encaisse via fork
  updateStatusPlat,      // Met √† jour un plat via fork
};
